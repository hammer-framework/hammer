#!/usr/bin/env node
/* eslint-env node, es6*/

const fs = require('fs')
const path = require('path')

const chokidar = require('chokidar')
const execa = require('execa')
const { glob } = require('glob')
const _ = require('lodash')
const packlist = require('npm-packlist')
const yargs = require('yargs')

const args = yargs
  .option('watch', { default: false, type: 'boolean', alias: 'w' })
  .option('dest', { required: true, type: 'string', alias: 'd' })
  .command('build-link')
  .example('build-link --dest /tmp/redwood-app/packages')
  .help()
  .strict().argv

const { dest, watch } = args

const CURRENT_DIR = process.cwd()
const pkgJson = require(path.join(CURRENT_DIR, 'package.json'))
const OUT_DIR = path.join(dest, `/${pkgJson.name.replace('@redwoodjs/', '')}`)

const srcFiles = glob
  .sync('src/**/*.{ts,js,tsx,jsx,json}', {
    cwd: CURRENT_DIR,
    ignore: [
      '**/*.test.ts',
      '**/*.test.js',
      '**/__fixtures__/**',
      '**/__tests__/**',
    ],
  })
  .map((filePath) => `./${filePath}`)

const buildAndCopy = () =>
  execa('yarn build', {
    shell: true,
    stdio: 'inherit',
    cleanup: true,
    cwd: CURRENT_DIR,
  }).then(() => {
    if ('bin' in pkgJson) {
      // Chmod if package has bins
      execa('yarn fix:permissions', {
        cwd: CURRENT_DIR,
      })
    }
    return packlist({ path: CURRENT_DIR }).then((files) => {
      files.forEach((file) => {
        copyToDest(file, OUT_DIR)
      })
      return files
    })
  })

// Creates folders where required, before copying
const copyToDest = (src, dest) => {
  const dirName = path.dirname(path.join(dest, `/${src}`))
  const fileName = path.basename(src)

  const exist = fs.existsSync(dirName)
  if (!exist) {
    fs.mkdirSync(dirName, { recursive: true })
  }

  fs.copyFileSync(src, path.join(dirName, fileName))
}

// Assigned if watch is true
let watchHandle

process.on('SIGINT', () => {
  watchHandle?.cancel()
})

// @Note:
// --watch flag starts the watcher, but won't build until change detected
if (watch) {
  // Start watcher
  packlist({ path: CURRENT_DIR }).then((files) => {
    const filesToWatch = [
      ...srcFiles,
      ...files.filter((fileName) => !fileName.match('dist/')),
    ]

    watchHandle = chokidar
      .watch(filesToWatch, {
        persistent: true,
      })
      .on(
        'change',
        _.debounce(() => {
          buildAndCopy()
        }, 500)
      )
  })
} else {
  buildAndCopy()
}
