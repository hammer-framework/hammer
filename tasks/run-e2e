#!/usr/bin/env node
/* eslint-env node, es6*/

const os = require('os')
const path = require('path')

const execa = require('execa')
const fs = require('fs-extra')
const yargs = require('yargs')

// This script sets up a blank RedwoodJS app into a directory.
// It uses the packages from the RedwoodJS framework (../packages).
// So, if you're making changes to the framework,
// you can use the e2e tests to verify your changes.
//
// The steps are composable, so that it can work for the GitHub Workflow, and
// us contributors.
//
const makeDirectory = () => {
  console.log('mkdir', REDWOOD_PROJECT_DIRECTORY)
  fs.mkdirSync(REDWOOD_PROJECT_DIRECTORY, { recursive: true })
  return REDWOOD_PROJECT_DIRECTORY
}

const buildRedwoodJSFramework = () => {
  try {
    execa.sync('yarn build:clean && yarn lerna run build:js', {
      cwd: REDWOODJS_FRAMEWORK_PATH,
      shell: true,
      stdio: 'inherit',
    })
  } catch (e) {
    console.error('Could not build RedwoodJS framework')
    console.error(e)
    process.exit(1)
  }
}

const createRedwoodJSApp = () => {
  try {
    execa.sync(
      'yarn babel-node src/create-redwood-app.js',
      [REDWOOD_PROJECT_DIRECTORY, '--no-yarn-install', '--no-javascript'],
      {
        cwd: path.join(REDWOODJS_FRAMEWORK_PATH, 'packages/create-redwood-app'),
        shell: true,
        stdio: 'inherit',
      }
    )
  } catch (e) {
    console.error('Could not create RedwoodJS project')
    console.error(e)
    process.exit(1)
  }
}

const copyFrameworkPackages = () => {
  try {
    console.log(
      'cp -r',
      `"${path.join(REDWOODJS_FRAMEWORK_PATH, 'packages')}"`,
      `"${path.join(REDWOOD_PROJECT_DIRECTORY, 'packages')}"`
    )
    execa.sync(
      'cp',
      [
        '-r',
        `"${path.join(REDWOODJS_FRAMEWORK_PATH, 'packages')}"`,
        `"${path.join(REDWOOD_PROJECT_DIRECTORY, 'packages')}"`,
      ],
      {
        shell: true,
        stdio: 'inherit',
      }
    )
  } catch (e) {
    console.error('We could not copy the RedwoodJS framework packages')
    console.error(e)
    process.exit(1)
  }
}

const runYarnInstall = () => {
  try {
    execa.sync('yarn install', {
      cwd: REDWOOD_PROJECT_DIRECTORY,
      shell: true,
      stdio: 'inherit',
    })
  } catch (e) {
    console.error('Could not run `yarn install`')
    console.error(e)
    process.exit(1)
  }
}

const convertProjectToJavaScript = () => {
  try {
    execa.sync('yarn rw ts-to-js', {
      cwd: REDWOOD_PROJECT_DIRECTORY,
      shell: true,
      stdio: 'inherit',
    })
  } catch (e) {
    console.error('Could not convert the TypeScript app to JavaScript`')
    console.error(e)
    process.exit(1)
  }
}

const runDevServerInBackground = () => {
  console.log('Starting RedwoodJS dev server...')
  execa.sync('yarn rw dev --fwd="--open=false" &', {
    cwd: REDWOOD_PROJECT_DIRECTORY,
    shell: true,
    stdio: 'inherit',
  })
}

const runCypress = () => {
  console.log('Starting Cypress...')
  execa.sync(
    'yarn cypress',
    ['open', `--env RW_PATH=${REDWOOD_PROJECT_DIRECTORY}`],
    {
      cwd: path.join(REDWOODJS_FRAMEWORK_PATH, 'tasks/e2e'),
      shell: true,
      stdio: 'inherit',
      env: process.env,
    }
  )
}

const installTaskDeps = () => {
  console.log('Installing dependencies for tasks/e2e')
  execa.sync('yarn install', {
    cwd: path.join(REDWOODJS_FRAMEWORK_PATH, 'tasks/e2e'),
    shell: true,
    stdio: 'inherit',
    env: process.env,
  })
}

const args = yargs
  .option('create-project', { default: true, type: 'boolean', alias: 'create' })
  .option('copy-framework', { default: true, type: 'boolean', alias: 'copy' })
  .option('js-project', { default: true, type: 'boolean', alias: 'js' })
  .option('auto-start', { default: true, type: 'boolean', alias: 'start' })
  .scriptName('run-cypress')
  .example('run-cypress')
  .example('run-cypress /tmp/redwood-app --no-js-project')
  .help()
  .strict().argv

const REDWOODJS_FRAMEWORK_PATH = path.resolve(__dirname, '..')
let REDWOOD_PROJECT_DIRECTORY =
  args._?.[0] ||
  path.join(
    os.tmpdir(),
    'redwood-e2e',
    // ":" is problematic with paths
    new Date().toISOString().split(':').join('-')
  )

console.log()
console.log('-'.repeat(80))
console.log()
makeDirectory(REDWOOD_PROJECT_DIRECTORY)
console.log()
console.log('-'.repeat(80))

let { copyFramework, createProject, jsProject, autoStart } = args

const tasks = [
  copyFramework && buildRedwoodJSFramework,
  createProject && createRedwoodJSApp,
  copyFramework && copyFrameworkPackages,
  copyFramework && runYarnInstall,
  jsProject && convertProjectToJavaScript,
  autoStart && runDevServerInBackground,
  autoStart && installTaskDeps,
  autoStart && runCypress,
].filter(Boolean)

for (const task of tasks) {
  console.log()
  task()
  console.log()
  console.log('-'.repeat(80))
}
