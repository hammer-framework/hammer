import gql from 'graphql-tag'

import { logger } from 'src/lib/logger'

export const schema = gql`
  type Subscription {
    ${subscriptionName}(id: ID!): ${typeName}!
  }
`
// Be sure to import this type and then in `api/src/lib/realtime.ts` extend PubSubChannels:
// export type PubSubChannels = ExistingChannel<string> & Publish${typeName}Channel<string>
export type Publish${typeName}Channel<T extends string> = {
  [Key in `${typeName}:<%= '$' %>{T}`]: [payload: { from: string; body: string }]
}

/**
 * To test this ${typeName} subscription, run the following in one GraphQL Playground to subscribe:
 *
 * subscription ListenTo${channelName} {
 *   ${subscriptionName}(id: "1") {
 *     body
 *     from
 *   }
 * }
 *
 *
 * And run the following in another GraphQL Playground to publish and send a new ${name} to the channel:
 *
 * mutation PublishTo${channelName} {
 *   ${subscriptionServiceResolver}(input: {id: "1", from: "hello", body: "bob"}) {
 *     body
 *     from
 *   }
 * }
 */
const ${subscriptionName}Subscription = {
  ${subscriptionName}: {
    subscribe: (_, { id }, { pubSub }) => {
      logger.debug({ id }, '${name} subscription')

      return pubSub.subscribe(`${typeName}:<%= '$' %>{id}`)
    },
    resolve: (payload) => {
      logger.debug({ payload }, '${name} subscription resolve')

      return payload
    },
  },
}

export default ${subscriptionName}Subscription
