export const schema = gql`
  """
  ${modelName}

  ${modelDescription}
  """
  type ${singularPascalName} {
    ${query}
  }

<% if (enums.length > 0) {%>
<% enums.forEach((enumDef, idx)=> {
  const enumName = enums[idx].name
  const enumDescription = enums[idx].documentation || `Possible values for ${enums[idx].name}`
  %>
  """
  ${enumName}

  ${enumDescription}
  """
  enum ${enums[idx].name} {<% enums[idx].values.forEach((enumDefValue, idk)=> { %>
    ${enums[idx].values[idk].name}<% }) %>
  }
<%}) %><% } %>

  """
  About queries
  """
  type Query {
    """
    Fetch ${pluralPascalName}.
    """
    ${pluralCamelName}: [${singularPascalName}!]! @requireAuth<% if (crud) { %>
    """
    Fetch a ${singularPascalName} by id.
    """
    ${singularCamelName}(id: ${idType}!): ${singularPascalName} @requireAuth<% } %>
  }

  """
  Autogenerated input type of Input${singularPascalName}.
  """
  input Create${singularPascalName}Input {
    ${createInput}
  }

  """
  Autogenerated input type of Update${singularPascalName}.
  """
  input Update${singularPascalName}Input {
    ${updateInput}
  }<% if (crud) { %>

  """
  About mutations
  """
  type Mutation {
    """
    Creates a new ${singularPascalName}.
    """
    create${singularPascalName}(input: Create${singularPascalName}Input!): ${singularPascalName}! @requireAuth
    """
    Updates an existing ${singularPascalName}.
    """
    update${singularPascalName}(id: ${idType}!, input: Update${singularPascalName}Input!): ${singularPascalName}! @requireAuth
    """
    Deletes an existing ${singularPascalName}.
    """
    delete${singularPascalName}(id: ${idType}!): ${singularPascalName}! @requireAuth
  }<% } %>
`
