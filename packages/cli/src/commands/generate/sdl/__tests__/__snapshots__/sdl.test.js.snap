// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`with graphql documentations > in javascript mode > creates a multi word sdl file 1`] = `
"export const schema = gql\`
  """
  Representation of UserProfile.
  """
  type UserProfile {
    "Description for id."
    id: Int!

    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!

    "Description for user."
    user: User!
  }

  """
  About queries
  """
  type Query {
    "Fetch UserProfiles."
    userProfiles: [UserProfile!]! @requireAuth

    "Fetch a UserProfile by id."
    userProfile(id: Int!): UserProfile @requireAuth
  }

  """
  Autogenerated input type of InputUserProfile.
  """
  input CreateUserProfileInput {
    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!
  }

  """
  Autogenerated input type of UpdateUserProfile.
  """
  input UpdateUserProfileInput {
    "Description for username."
    username: String

    "Description for userId."
    userId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new UserProfile."
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth

    "Updates an existing UserProfile."
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth

    "Deletes an existing UserProfile."
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  """
  Representation of UserProfile.
  """
  type UserProfile {
    "Description for id."
    id: Int!

    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!

    "Description for user."
    user: User!
  }

  """
  About queries
  """
  type Query {
    "Fetch UserProfiles."
    userProfiles: [UserProfile!]! @requireAuth

    "Fetch a UserProfile by id."
    userProfile(id: Int!): UserProfile @requireAuth
  }

  """
  Autogenerated input type of InputUserProfile.
  """
  input CreateUserProfileInput {
    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!
  }

  """
  Autogenerated input type of UpdateUserProfile.
  """
  input UpdateUserProfileInput {
    "Description for username."
    username: String

    "Description for userId."
    userId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new UserProfile."
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth

    "Updates an existing UserProfile."
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth

    "Deletes an existing UserProfile."
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a sdl file with Byte definitions 1`] = `
"export const schema = gql\`
  """
  Representation of Key.
  """
  type Key {
    "Description for id."
    id: Int!

    "Description for publicKey."
    publicKey: Byte!
  }

  """
  About queries
  """
  type Query {
    "Fetch Keys."
    keys: [Key!]! @requireAuth

    "Fetch a Key by id."
    key(id: Int!): Key @requireAuth
  }

  """
  Autogenerated input type of InputKey.
  """
  input CreateKeyInput {
    "Description for publicKey."
    publicKey: Byte!
  }

  """
  Autogenerated input type of UpdateKey.
  """
  input UpdateKeyInput {
    "Description for publicKey."
    publicKey: Byte
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Key."
    createKey(input: CreateKeyInput!): Key! @requireAuth

    "Updates an existing Key."
    updateKey(id: Int!, input: UpdateKeyInput!): Key! @requireAuth

    "Deletes an existing Key."
    deleteKey(id: Int!): Key! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  """
  A shoe worn by a user.
  """
  type Shoe {
    "The underlying ID"
    id: Int!

    "Shoe color"
    color: Color!
  }

  """
  A list of allowed colors.
  """
  enum Color {
    RED
    GREEN
    BLUE
  }

  """
  About queries
  """
  type Query {
    "Fetch Shoes."
    shoes: [Shoe!]! @requireAuth

    "Fetch a Shoe by id."
    shoe(id: Int!): Shoe @requireAuth
  }

  """
  Autogenerated input type of InputShoe.
  """
  input CreateShoeInput {
    "Shoe color"
    color: Color!
  }

  """
  Autogenerated input type of UpdateShoe.
  """
  input UpdateShoeInput {
    "Shoe color"
    color: Color
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Shoe."
    createShoe(input: CreateShoeInput!): Shoe! @requireAuth

    "Updates an existing Shoe."
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @requireAuth

    "Deletes an existing Shoe."
    deleteShoe(id: Int!): Shoe! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  """
  A photograph taken by a user.
  """
  type Photo {
    "The underlying ID"
    id: Int!

    "The name of the Photo"
    name: String!

    "Description for metadata."
    metadata: JSON!
  }

  """
  About queries
  """
  type Query {
    "Fetch Photos."
    photos: [Photo!]! @requireAuth

    "Fetch a Photo by id."
    photo(id: Int!): Photo @requireAuth
  }

  """
  Autogenerated input type of InputPhoto.
  """
  input CreatePhotoInput {
    "The name of the Photo"
    name: String!

    "Description for metadata."
    metadata: JSON!
  }

  """
  Autogenerated input type of UpdatePhoto.
  """
  input UpdatePhotoInput {
    "The name of the Photo"
    name: String

    "Description for metadata."
    metadata: JSON
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Photo."
    createPhoto(input: CreatePhotoInput!): Photo! @requireAuth

    "Updates an existing Photo."
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @requireAuth

    "Deletes an existing Photo."
    deletePhoto(id: Int!): Photo! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a single word sdl file 1`] = `
"export const schema = gql\`
  """
  Representation of User.
  """
  type User {
    "Description for id."
    id: Int!

    "Description for name."
    name: String

    "Description for email."
    email: String!

    "Description for isAdmin."
    isAdmin: Boolean!

    "Description for profiles."
    profiles: [UserProfile]!
  }

  """
  About queries
  """
  type Query {
    "Fetch Users."
    users: [User!]! @requireAuth
  }

  """
  Autogenerated input type of InputUser.
  """
  input CreateUserInput {
    "Description for name."
    name: String

    "Description for email."
    email: String!

    "Description for isAdmin."
    isAdmin: Boolean!
  }

  """
  Autogenerated input type of UpdateUser.
  """
  input UpdateUserInput {
    "Description for name."
    name: String

    "Description for email."
    email: String

    "Description for isAdmin."
    isAdmin: Boolean
  }
\`
"
`;

exports[`with graphql documentations > in javascript mode > creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  """
  Representation of Post.
  """
  type Post {
    "Description for id."
    id: Int!

    "Description for title."
    title: String!

    "Description for slug."
    slug: String!

    "Description for author."
    author: String!

    "Description for body."
    body: String!

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  About queries
  """
  type Query {
    "Fetch Posts."
    posts: [Post!]! @requireAuth

    "Fetch a Post by id."
    post(id: Int!): Post @requireAuth
  }

  """
  Autogenerated input type of InputPost.
  """
  input CreatePostInput {
    "Description for title."
    title: String!

    "Description for slug."
    slug: String!

    "Description for author."
    author: String!

    "Description for body."
    body: String!

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  Autogenerated input type of UpdatePost.
  """
  input UpdatePostInput {
    "Description for title."
    title: String

    "Description for slug."
    slug: String

    "Description for author."
    author: String

    "Description for body."
    body: String

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Post."
    createPost(input: CreatePostInput!): Post! @requireAuth

    "Updates an existing Post."
    updatePost(id: Int!, input: UpdatePostInput!): Post! @requireAuth

    "Deletes an existing Post."
    deletePost(id: Int!): Post! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a multi word sdl file 1`] = `
"export const schema = gql\`
  """
  Representation of UserProfile.
  """
  type UserProfile {
    "Description for id."
    id: Int!

    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!

    "Description for user."
    user: User!
  }

  """
  About queries
  """
  type Query {
    "Fetch UserProfiles."
    userProfiles: [UserProfile!]! @requireAuth

    "Fetch a UserProfile by id."
    userProfile(id: Int!): UserProfile @requireAuth
  }

  """
  Autogenerated input type of InputUserProfile.
  """
  input CreateUserProfileInput {
    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!
  }

  """
  Autogenerated input type of UpdateUserProfile.
  """
  input UpdateUserProfileInput {
    "Description for username."
    username: String

    "Description for userId."
    userId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new UserProfile."
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth

    "Updates an existing UserProfile."
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth

    "Deletes an existing UserProfile."
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  """
  Representation of UserProfile.
  """
  type UserProfile {
    "Description for id."
    id: Int!

    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!

    "Description for user."
    user: User!
  }

  """
  About queries
  """
  type Query {
    "Fetch UserProfiles."
    userProfiles: [UserProfile!]! @requireAuth

    "Fetch a UserProfile by id."
    userProfile(id: Int!): UserProfile @requireAuth
  }

  """
  Autogenerated input type of InputUserProfile.
  """
  input CreateUserProfileInput {
    "Description for username."
    username: String!

    "Description for userId."
    userId: Int!
  }

  """
  Autogenerated input type of UpdateUserProfile.
  """
  input UpdateUserProfileInput {
    "Description for username."
    username: String

    "Description for userId."
    userId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new UserProfile."
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth

    "Updates an existing UserProfile."
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth

    "Deletes an existing UserProfile."
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a sdl file with Byte definitions 1`] = `
"export const schema = gql\`
  """
  Representation of Key.
  """
  type Key {
    "Description for id."
    id: Int!

    "Description for publicKey."
    publicKey: Byte!
  }

  """
  About queries
  """
  type Query {
    "Fetch Keys."
    keys: [Key!]! @requireAuth

    "Fetch a Key by id."
    key(id: Int!): Key @requireAuth
  }

  """
  Autogenerated input type of InputKey.
  """
  input CreateKeyInput {
    "Description for publicKey."
    publicKey: Byte!
  }

  """
  Autogenerated input type of UpdateKey.
  """
  input UpdateKeyInput {
    "Description for publicKey."
    publicKey: Byte
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Key."
    createKey(input: CreateKeyInput!): Key! @requireAuth

    "Updates an existing Key."
    updateKey(id: Int!, input: UpdateKeyInput!): Key! @requireAuth

    "Deletes an existing Key."
    deleteKey(id: Int!): Key! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  """
  A shoe worn by a user.
  """
  type Shoe {
    "The underlying ID"
    id: Int!

    "Shoe color"
    color: Color!
  }

  """
  A list of allowed colors.
  """
  enum Color {
    RED
    GREEN
    BLUE
  }

  """
  About queries
  """
  type Query {
    "Fetch Shoes."
    shoes: [Shoe!]! @requireAuth

    "Fetch a Shoe by id."
    shoe(id: Int!): Shoe @requireAuth
  }

  """
  Autogenerated input type of InputShoe.
  """
  input CreateShoeInput {
    "Shoe color"
    color: Color!
  }

  """
  Autogenerated input type of UpdateShoe.
  """
  input UpdateShoeInput {
    "Shoe color"
    color: Color
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Shoe."
    createShoe(input: CreateShoeInput!): Shoe! @requireAuth

    "Updates an existing Shoe."
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @requireAuth

    "Deletes an existing Shoe."
    deleteShoe(id: Int!): Shoe! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  """
  A photograph taken by a user.
  """
  type Photo {
    "The underlying ID"
    id: Int!

    "The name of the Photo"
    name: String!

    "Description for metadata."
    metadata: JSON!
  }

  """
  About queries
  """
  type Query {
    "Fetch Photos."
    photos: [Photo!]! @requireAuth

    "Fetch a Photo by id."
    photo(id: Int!): Photo @requireAuth
  }

  """
  Autogenerated input type of InputPhoto.
  """
  input CreatePhotoInput {
    "The name of the Photo"
    name: String!

    "Description for metadata."
    metadata: JSON!
  }

  """
  Autogenerated input type of UpdatePhoto.
  """
  input UpdatePhotoInput {
    "The name of the Photo"
    name: String

    "Description for metadata."
    metadata: JSON
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Photo."
    createPhoto(input: CreatePhotoInput!): Photo! @requireAuth

    "Updates an existing Photo."
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @requireAuth

    "Deletes an existing Photo."
    deletePhoto(id: Int!): Photo! @requireAuth
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a single word sdl file 1`] = `
"export const schema = gql\`
  """
  Representation of User.
  """
  type User {
    "Description for id."
    id: Int!

    "Description for name."
    name: String

    "Description for email."
    email: String!

    "Description for isAdmin."
    isAdmin: Boolean!

    "Description for profiles."
    profiles: [UserProfile]!
  }

  """
  About queries
  """
  type Query {
    "Fetch Users."
    users: [User!]! @requireAuth
  }

  """
  Autogenerated input type of InputUser.
  """
  input CreateUserInput {
    "Description for name."
    name: String

    "Description for email."
    email: String!

    "Description for isAdmin."
    isAdmin: Boolean!
  }

  """
  Autogenerated input type of UpdateUser.
  """
  input UpdateUserInput {
    "Description for name."
    name: String

    "Description for email."
    email: String

    "Description for isAdmin."
    isAdmin: Boolean
  }
\`
"
`;

exports[`with graphql documentations > in typescript mode > creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  """
  Representation of Post.
  """
  type Post {
    "Description for id."
    id: Int!

    "Description for title."
    title: String!

    "Description for slug."
    slug: String!

    "Description for author."
    author: String!

    "Description for body."
    body: String!

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  About queries
  """
  type Query {
    "Fetch Posts."
    posts: [Post!]! @requireAuth

    "Fetch a Post by id."
    post(id: Int!): Post @requireAuth
  }

  """
  Autogenerated input type of InputPost.
  """
  input CreatePostInput {
    "Description for title."
    title: String!

    "Description for slug."
    slug: String!

    "Description for author."
    author: String!

    "Description for body."
    body: String!

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  Autogenerated input type of UpdatePost.
  """
  input UpdatePostInput {
    "Description for title."
    title: String

    "Description for slug."
    slug: String

    "Description for author."
    author: String

    "Description for body."
    body: String

    "Description for image."
    image: String

    "Description for postedAt."
    postedAt: DateTime
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Post."
    createPost(input: CreatePostInput!): Post! @requireAuth

    "Updates an existing Post."
    updatePost(id: Int!, input: UpdatePostInput!): Post! @requireAuth

    "Deletes an existing Post."
    deletePost(id: Int!): Post! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a multi word sdl file 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @requireAuth
    userProfile(id: Int!): UserProfile @requireAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @requireAuth
    userProfile(id: Int!): UserProfile @requireAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a sdl file with Byte definitions 1`] = `
"export const schema = gql\`
  type Key {
    id: Int!
    publicKey: Byte!
  }

  type Query {
    keys: [Key!]! @requireAuth
    key(id: Int!): Key @requireAuth
  }

  input CreateKeyInput {
    publicKey: Byte!
  }

  input UpdateKeyInput {
    publicKey: Byte
  }

  type Mutation {
    createKey(input: CreateKeyInput!): Key! @requireAuth
    updateKey(id: Int!, input: UpdateKeyInput!): Key! @requireAuth
    deleteKey(id: Int!): Key! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  type Shoe {
    id: Int!
    color: Color!
  }

  enum Color {
    RED
    GREEN
    BLUE
  }

  type Query {
    shoes: [Shoe!]! @requireAuth
    shoe(id: Int!): Shoe @requireAuth
  }

  input CreateShoeInput {
    color: Color!
  }

  input UpdateShoeInput {
    color: Color
  }

  type Mutation {
    createShoe(input: CreateShoeInput!): Shoe! @requireAuth
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @requireAuth
    deleteShoe(id: Int!): Shoe! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  type Photo {
    id: Int!
    name: String!
    metadata: JSON!
  }

  type Query {
    photos: [Photo!]! @requireAuth
    photo(id: Int!): Photo @requireAuth
  }

  input CreatePhotoInput {
    name: String!
    metadata: JSON!
  }

  input UpdatePhotoInput {
    name: String
    metadata: JSON
  }

  type Mutation {
    createPhoto(input: CreatePhotoInput!): Photo! @requireAuth
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @requireAuth
    deletePhoto(id: Int!): Photo! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a single word sdl file 1`] = `
"export const schema = gql\`
  type User {
    id: Int!
    name: String
    email: String!
    isAdmin: Boolean!
    profiles: [UserProfile]!
  }

  type Query {
    users: [User!]! @requireAuth
  }

  input CreateUserInput {
    name: String
    email: String!
    isAdmin: Boolean!
  }

  input UpdateUserInput {
    name: String
    email: String
    isAdmin: Boolean
  }
\`
"
`;

exports[`without graphql documentations > in javascript mode > creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  type Query {
    posts: [Post!]! @requireAuth
    post(id: Int!): Post @requireAuth
  }

  input CreatePostInput {
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  input UpdatePostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: CreatePostInput!): Post! @requireAuth
    updatePost(id: Int!, input: UpdatePostInput!): Post! @requireAuth
    deletePost(id: Int!): Post! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a multi word sdl file 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @requireAuth
    userProfile(id: Int!): UserProfile @requireAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @requireAuth
    userProfile(id: Int!): UserProfile @requireAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @requireAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @requireAuth
    deleteUserProfile(id: Int!): UserProfile! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a sdl file with Byte definitions 1`] = `
"export const schema = gql\`
  type Key {
    id: Int!
    publicKey: Byte!
  }

  type Query {
    keys: [Key!]! @requireAuth
    key(id: Int!): Key @requireAuth
  }

  input CreateKeyInput {
    publicKey: Byte!
  }

  input UpdateKeyInput {
    publicKey: Byte
  }

  type Mutation {
    createKey(input: CreateKeyInput!): Key! @requireAuth
    updateKey(id: Int!, input: UpdateKeyInput!): Key! @requireAuth
    deleteKey(id: Int!): Key! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  type Shoe {
    id: Int!
    color: Color!
  }

  enum Color {
    RED
    GREEN
    BLUE
  }

  type Query {
    shoes: [Shoe!]! @requireAuth
    shoe(id: Int!): Shoe @requireAuth
  }

  input CreateShoeInput {
    color: Color!
  }

  input UpdateShoeInput {
    color: Color
  }

  type Mutation {
    createShoe(input: CreateShoeInput!): Shoe! @requireAuth
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @requireAuth
    deleteShoe(id: Int!): Shoe! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  type Photo {
    id: Int!
    name: String!
    metadata: JSON!
  }

  type Query {
    photos: [Photo!]! @requireAuth
    photo(id: Int!): Photo @requireAuth
  }

  input CreatePhotoInput {
    name: String!
    metadata: JSON!
  }

  input UpdatePhotoInput {
    name: String
    metadata: JSON
  }

  type Mutation {
    createPhoto(input: CreatePhotoInput!): Photo! @requireAuth
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @requireAuth
    deletePhoto(id: Int!): Photo! @requireAuth
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a single word sdl file 1`] = `
"export const schema = gql\`
  type User {
    id: Int!
    name: String
    email: String!
    isAdmin: Boolean!
    profiles: [UserProfile]!
  }

  type Query {
    users: [User!]! @requireAuth
  }

  input CreateUserInput {
    name: String
    email: String!
    isAdmin: Boolean!
  }

  input UpdateUserInput {
    name: String
    email: String
    isAdmin: Boolean
  }
\`
"
`;

exports[`without graphql documentations > in typescript mode > creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  type Query {
    posts: [Post!]! @requireAuth
    post(id: Int!): Post @requireAuth
  }

  input CreatePostInput {
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  input UpdatePostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: CreatePostInput!): Post! @requireAuth
    updatePost(id: Int!, input: UpdatePostInput!): Post! @requireAuth
    deletePost(id: Int!): Post! @requireAuth
  }
\`
"
`;
