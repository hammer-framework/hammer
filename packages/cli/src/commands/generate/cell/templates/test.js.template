import { render, screen, expectToRender } from '@redwoodjs/testing/web'
import { Loading, Empty, Failure, Success } from './${pascalName}Cell'
import { standard } from './${pascalName}Cell.mock'

// Generated boilerplate tests do not account for all circumstances
// and can fail without adjustments, e.g. Float and DateTime types.
//            Please refer to the RedwoodJS Testing Docs:
//         https://redwoodjs.com/docs/testing#testing-cells
// https://redwoodjs.com/docs/testing#jest-expect-type-considerations

describe('${pascalName}Cell', () => {
  it('renders Loading successfully', async () => {
    render(<Loading />)

    await expect(screen.findByText('Loading...')).toBeInTheDocument()
  })

  it('renders Empty successfully', async () => {
    render(<Empty />)

    await expect(screen.findByText('Empty')).toBeInTheDocument()
  })

  it('renders Failure successfully', async () => {
    render(<Failure error={new Error('Oh no')} />)

    await expect(screen.findByText(/Error/)).toBeInTheDocument()
  })

  // When you're ready to test the actual output of your component render
  // you could test that, for example, certain text is present:
  //
  // expect(screen.getByText('Hello, world')).toBeInTheDocument()

  it('renders Success successfully', async () => {
    await expectToRender(<Success ${camelName}={standard().${camelName}} />)
  })
})
