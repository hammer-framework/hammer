// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates a JavaScript validator directive: js directive 1`] = `
"import { createValidatorDirective } from '@redwoodjs/graphql-server'
import { logger } from 'src/lib/logger'

export const schema = gql\`
  directive @requireAdmin on FIELD_DEFINITION
\`

const transform = ({ context, directiveArgs }) => {
  /**
   * Write your validation logic inside this function.
   * Validator directives do not have access to the field value, i.e. they are called before resolving the value
   *
   * - Throw an error, if you want to stop executing e.g. not sufficient permissions
   * - Validator directives can be async or sync
   * - Returned value will be ignored
   */

  // currentUser is only available when auth is setup.
  logger.debug(
    { currentUser: context.currentUser },
    'currentUser in requireAdmin directive'
  )

  // You can also modify your directive to take arguments
  // and use the directiveArgs object provided to this function to get values
  // See documentation here: https://redwoodjs.com/docs/directives
  logger.debug(directiveArgs, 'directiveArgs in requireAdmin directive')

  throw new Error('Implement me!')
}

export const requireAdmin = createValidatorDirective(schema, transform)
"
`;

exports[`creates a JavaScript validator directive: js directive test 1`] = `
"import { mockRedwoodDirective, getDirectiveName } from '@redwoodjs/testing/api'

import { schema, requireAdmin } from './requireAdmin.directive'

describe('requireAdmin directive', () => {
  it('declares the directive sdl as schema, with the correct name', () => {
    expect(schema).toBeTruthy()
    expect(getDirectiveName(schema)).toBe('requireAdmin')
  })

  it('has a requireAdmin implementation that does not error', () => {
    const mockExecution = mockRedwoodDirective(requireAdmin, {
      context: {}, // pass in context if you need to check specific cases
      resolver: () => 'Example field value',
    })

    expect(mockExecution).not.toThrow()

    // @NOTE You can also test transformations like this:
    // expect(mockExecution()).toBe('myTransformedValue')
  })
})
"
`;

exports[`creates a TypeScript transformer directive: ts directive 1`] = `
"import {
  createTransformerDirective,
  TransformerDirectiveFunc,
} from '@redwoodjs/graphql-server'
import { logger } from 'src/lib/logger'

export const schema = gql\`
  directive @bazingaFooBar on FIELD_DEFINITION
\`

const transform: TransformerDirectiveFunc = ({ context, resolvedValue }) => {
  /**
   * Write your transformation logic inside this function.
   * Transformer directives run **after** resolving the value
   *
   * - You can also throw an error, if you want to stop executing, but note that the value has already been resolved
   * - Transformer directives **must** be synchronous, and return a value
   **/

  // currentUser is only available when auth is setup.
  logger.debug(
    { currentUser: context.currentUser },
    'currentUser in bazingaFooBar directive'
  )

  // ... you can modify the resolvedValue and return it
  logger.debug(resolvedValue, 'resolvedValue in bazingaFooBar directive')

  // You can also modify your directive to take arguments
  // and use the directiveArgs object provided to this function to get values
  // See documentation here: https://redwoodjs.com/docs/directives
}

export const bazingaFooBar = createTransformerDirective(schema, transform)
"
`;

exports[`creates a TypeScript transformer directive: ts directive test 1`] = `
"import { mockRedwoodDirective, getDirectiveName } from '@redwoodjs/testing/api'

import { schema, bazingaFooBar } from './bazingaFooBar.directive'

describe('bazingaFooBar directive', () => {
  it('declares the directive sdl as schema, with the correct name', () => {
    expect(schema).toBeTruthy()
    expect(getDirectiveName(schema)).toBe('bazingaFooBar')
  })

  it('has a bazingaFooBar implementation that does not error', () => {
    const mockExecution = mockRedwoodDirective(bazingaFooBar, {
      context: {}, // pass in context if you need to check specific cases
      resolver: () => 'Example field value',
    })

    expect(mockExecution).not.toThrow()

    // @NOTE You can also test transformations like this:
    // expect(mockExecution()).toBe('myTransformedValue')
  })
})
"
`;
