// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates a JavaScript directive: js directive 1`] = `
"import { logger } from 'src/lib/logger'

export const schema = gql\`
  directive @requireAdmin on FIELD_DEFINITION
\`

export const requireAdmin = ({ context, getFieldValue }) => {
  // Implement your directive here. This will be executed \\"onExecute\\"
  // More information on graphql lifecycle here: https://www.envelop.dev/docs/plugins/lifecycle

  // If you want to implement a validation: throw an error if criteria not met to stop execution
  // CurrentUser is only available when auth is setup.
  // Any roles provided to the directive are available in the roles object provided to this function
  logger.debug(
    { currentUser: context.currentUser },
    'currentUser in requireAdmin directive is only available when auth is setup'
  )

  // If you want to implement a transform: you can modify the value and return it
  // @NOTE: Make sure that you want this data to be accessible, before calling getFieldValue
  const fieldValue = getFieldValue()
  logger.debug(
    { fieldValue: fieldValue },
    'fieldValue in requireAdmin directive can be modified'
  )

  // You can also modify your directive to take arguments
  // and use the argumentValues object provided to this function to get values
  // See documentation here: https://redwoodjs.com/docs/directives
}
"
`;

exports[`creates a JavaScript directive: js directive test 1`] = `
"import { mockRedwoodDirective, getDirectiveName } from '@redwoodjs/testing/api'

import { schema, requireAdmin } from './requireAdmin.directive'

describe('requireAdmin directive', () => {
  it('declares the directive sdl as schema, with the correct name', () => {
    expect(schema).toBeTruthy()
    expect(getDirectiveName(schema)).toBe('requireAdmin')
  })

  it('has a requireAdmin implementation that does not error', () => {
    const mockExecution = mockRedwoodDirective(requireAdmin, {
      context: {}, // pass in context if you need to check specific cases
      resolver: () => 'Example field value',
    })

    expect(mockExecution).not.toThrow()

    // @NOTE You can also test transformations like this:
    // expect(mockExecution()).toBe('myTransformedValue')
  })
})
"
`;

exports[`creates a TypeScript directive: ts directive 1`] = `
"import type { RedwoodDirective } from '@redwoodjs/graphql-server'

import { logger } from 'src/lib/logger'

export const schema = gql\`
  directive @bazingaFooBar on FIELD_DEFINITION
\`

export const bazingaFooBar: RedwoodDirective = ({ context, getFieldValue }) => {
  // Implement your directive here. This will be executed \\"onExecute\\"
  // More information on graphql lifecycle here: https://www.envelop.dev/docs/plugins/lifecycle

  // If you want to implement a validation: throw an error if criteria not met to stop execution
  // CurrentUser is only available when auth is setup.
  // Any roles provided to the directive are available in the roles object provided to this function
  logger.debug(
    { currentUser: context.currentUser },
    'currentUser in bazingaFooBar directive is only available when auth is setup'
  )

  // If you want to implement a transform: you can modify the value and return it
  // @NOTE: Make sure that you want this data to be accessible, before calling getFieldValue
  const fieldValue = getFieldValue()
  logger.debug(
    { fieldValue: fieldValue },
    'fieldValue in bazingaFooBar directive can be modified'
  )

  // You can also modify your directive to take arguments
  // and use the argumentValues object provided to this function to get values
  // See documentation here: https://redwoodjs.com/docs/directives
}
"
`;

exports[`creates a TypeScript directive: ts directive test 1`] = `
"import { mockRedwoodDirective, getDirectiveName } from '@redwoodjs/testing/api'

import { schema, bazingaFooBar } from './bazingaFooBar.directive'

describe('bazingaFooBar directive', () => {
  it('declares the directive sdl as schema, with the correct name', () => {
    expect(schema).toBeTruthy()
    expect(getDirectiveName(schema)).toBe('bazingaFooBar')
  })

  it('has a bazingaFooBar implementation that does not error', () => {
    const mockExecution = mockRedwoodDirective(bazingaFooBar, {
      context: {}, // pass in context if you need to check specific cases
      resolver: () => 'Example field value',
    })

    expect(mockExecution).not.toThrow()

    // @NOTE You can also test transformations like this:
    // expect(mockExecution()).toBe('myTransformedValue')
  })
})
"
`;
