import { mockRedwoodDirective, getDirectiveName } from '@redwoodjs/testing/api'

import  { schema, ${camelName} } from './${camelName}.directive'

describe('${camelName} directive', () => {
  it('declares the directive sdl as schema, with the correct name', () => {
    expect(schema).toBeTruthy()
    expect(getDirectiveName(schema)).toBe('${camelName}')
  })

  it('has a ${camelName} implementation that does not error', () => {
    const mockExecution = mockRedwoodDirective(${camelName}, {
      context: {}, // pass in context if you need to check specific cases
      resolver: () => 'Example field value'
    })

    expect(mockExecution).not.toThrow()

    // @NOTE You can also test transformations like this:
    // expect(mockExecution()).toBe('myTransformedValue')
  })
})
