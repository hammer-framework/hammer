import { db } from 'src/lib/db'
import type { Queries<% if (crud) { %>, Mutations<% } %><% if (relations.length) { %>, ${singularCamelName}Queries<% } %> } from 'types/resolvers'

export const ${pluralCamelName}: Queries['${pluralCamelName}'] = () => {
  return db.${singularCamelName}.findMany()
}<% if (crud || relations.length) { %>

export const ${singularCamelName}: Queries['${singularCamelName}'] = ({ id }) => {
  return db.${singularCamelName}.findUnique({
    where: { id },
  })
}<% } %><% if (crud) { %>

export const create${singularPascalName}: Mutations['create${singularPascalName}'] = ({ input }) => {
  return db.${singularCamelName}.create({
    data: input,
  })
}

export const update${singularPascalName}: Mutations['create${singularPascalName}'] = ({ id, input }) => {
  return db.${singularCamelName}.update({
    data: input,
    where: { id },
  })
}

export const delete${singularPascalName}: Mutations['delete${singularPascalName}'] = ({ id }) => {
  return db.${singularCamelName}.delete({
    where: { id },
  })
}<% } %><% if (relations.length) { %>

export const ${singularPascalName}: ${singularCamelName}Queries  = {<% relations.forEach(relation => { %>
  ${relation}: (_obj, { root }) => db.${singularCamelName}.findUnique({ where: { id: root.id } }).${relation}(),<% }) %>
}<% } %>
