import {
  Form,
  FormError,
  FieldError,
  Label,
  ${fieldsToImport.join(',\n  ')},
  Submit,
} from '@redwoodjs/forms'

const humanize = (value) => {
  if (value) {
    return value.replace(/:\d{2}\.\d{3}\w/, '')
  }
}

const formatDatetime = (value) => {
  if (value) {
    return value.replace(/:\d{2}\.\d{3}\w/, '')
  }
}

const ${singularPascalName}Form = (props) => {
  const onSubmit = (data) => {
    props.onSave(data, props?.${singularCamelName}?.id)
  }

  return (
    <div className="rw-form-wrapper">
      <Form onSubmit={onSubmit} error={props.error}>
        <FormError
          error={props.error}
          wrapperClassName="rw-form-error-wrapper"
          titleClassName="rw-form-error-title"
          listClassName="rw-form-error-list"
        />
<% editableColumns.forEach(column => { %>
        <Label
          name="${column.name}"
          className="rw-label"
          errorClassName="rw-label rw-label-error"
        >
          ${column.label}
        </Label>

        <% if (column.isEnum) { %>
          <% column.values?.forEach(value => { %>
            <${column.component}
              name="${column.name}"
              value="${value.name}"
              ${column.defaultProp}={props.${singularCamelName}?.${column.name}?.includes('${value.name}')}
              className="rw-input"
              errorClassName="rw-input rw-input-error"<%= !column.validation ? '' : `
              validation=${column.validation}` %>
            />${value.name.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}
          <% }) %>
        <% } else { %>
          <${column.component}
            name="${column.name}"
            ${column.defaultProp}={${column.deserializeFunction && column.deserializeFunction + '('}props.${singularCamelName}?.<%= column.name %>${column.deserializeFunction && ')'}}
            className="rw-input"
            errorClassName="rw-input rw-input-error"<%= !column.validation ? '' : `
            validation=${column.validation}` %>
          />
        <% } %>

        <FieldError name="${column.name}" className="rw-field-error" />
<% }) %>
        <div className="rw-button-group">
          <Submit
            disabled={props.loading}
            className="rw-button rw-button-blue"
          >
            Save
          </Submit>
        </div>
      </Form>
    </div>
  )
}

export default ${singularPascalName}Form
