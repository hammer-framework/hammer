import fs from 'fs'
import path from 'path'

import { getPaths } from '@redwoodjs/internal'

const PROTOCOL_TO_PROVIDER_MAP = {
  file: 'sqlite',
  postgres: 'postgresql',
  mysql: 'mysql',
}
const PREFIX_COMMENT = `
// DO NOT EDIT THIS FILE AND DO NOT COMMIT TO YOUR REPO
//
// This is a temporary file generated by Redwood for Prisma. It should be
// automatically removed when a Prisma command is done running, so if you're
// seeing it here then something went wrong with that process. The next time
// a database command completes successfully like \`yarn rw db generate\` this
// file should get cleaned up automatically. Carry on.

`

// gets the name of the ENV var out of the schema, if present. ie: DB_HOST
const getEnvVarName = (schema) => {
  const matches = schema.match(/url *= *env\(['"](.*?)['"]\)/)

  return matches && matches[1]
}

// gets the actual string that's set in the environment. ie: file:///dev.db
const getConnectionString = (schema) => {
  const envVarName = getEnvVarName(schema)

  return envVarName && process.env[envVarName]
}

// gets the provider name that prisma wants based on the db connection string. ie: sqlite
const getProvider = (host) => {
  const protocol = host.split(':')[0]

  return protocol ? PROTOCOL_TO_PROVIDER_MAP[protocol] : null
}

const hasRedwoodProvider = (schema) => {
  return !!schema.match(/provider *= *['"]redwood['"]/)
}

// reads api/prisma/schema.prisma and dynamically sets the provider based on what you have set in
// your ENV, then writes out the schema to a tmp file, returning the path to said file
export const generateTempSchema = () => {
  let schema = fs.readFileSync(getPaths().api.dbSchema).toString()

  // no need to continue if the schema doesn't have the "redwood" provider,
  // just return the path to the default schema in the app
  if (!hasRedwoodProvider(schema)) {
    return getPaths().api.dbSchema
  }

  const tempSchemaPath = path.join(getPaths().api.db, 'schema.temp.prisma')
  const host = getConnectionString(schema)

  if (host) {
    const provider = getProvider(host)

    if (provider) {
      const newSchema =
        PREFIX_COMMENT + schema.replace(/(['"])redwood['"]/, `$1${provider}$1`)

      fs.writeFileSync(tempSchemaPath, newSchema)
      console.info(`Using ${provider} provider as set in DB_HOST`)

      return tempSchemaPath
    } else {
      throw new Error(
        `Unable to determine provider from host "${host}".\nMake sure your db host protocol (the part before :) is one of: [file, postgres, mysql]`
      )
    }
  }
}
