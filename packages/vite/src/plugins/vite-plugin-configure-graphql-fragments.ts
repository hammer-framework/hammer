import fs from 'fs'
import path from 'path'

import { transformWithEsbuild } from 'vite'
import type { PluginOption } from 'vite'

import { getConfig, getPaths } from '@redwoodjs/project-config'

const DEFAULT_POSSIBLE_TYPES_FILE_CONTENTS = `export interface PossibleTypesResultData {
  possibleTypes: {
    [key: string]: string[]
  }
}

const result: PossibleTypesResultData = {
  possibleTypes: {},
}

export default result
`

/**
 *
 * This is a vite plugin to support GraphQL Fragments by either
 * creating a default possible types file to be used when configuring Apollo Client Cache config
 * or, allowing Apollo Client to use the possibleTypes file that is generated by the GraphQL Code Generator
 *
 * This plugin handles both build and dev (aka serve) modes
 *
 * When building, a transform hook is used to replace the import of the possibleTypes
 * file with the actual contents of the file
 *
 * See:
 *
 * packages/web/src/apollo/index.ts -> import possibleTypes from './possibleTypes'
 * packages/web/src/apollo/possibleTypes.ts
 *
 */
export default function configureGraphQLFragments(): PluginOption {
  const rwConfig = getConfig()

  const possibleTypesFilePath = path.join(
    getPaths().web.graphql,
    'possibleTypes.ts'
  )

  const useFragments = rwConfig.graphql.fragments
  const existsPossibleTypesFile = fs.existsSync(possibleTypesFilePath)

  return {
    name: 'configure-graphql-fragments',
    configureServer() {
      return () => {
        // if a RedwoodJS project isn't configured to use fragments, then
        // create the default possibleTypes file (but, don't overwrite it)
        if (!useFragments && !existsPossibleTypesFile) {
          const dirname = path.dirname(possibleTypesFilePath)
          if (!fs.existsSync(dirname)) {
            fs.mkdirSync(dirname, { recursive: true })
          }
          fs.writeFileSync(
            possibleTypesFilePath,
            DEFAULT_POSSIBLE_TYPES_FILE_CONTENTS
          )
        }
      }
    },
    async transform(_code: string, id: string) {
      if (/@redwoodjs\/web\/dist\/apollo\/possibleTypes/.test(id)) {
        if (existsPossibleTypesFile) {
          const possibleTypeFile = fs.readFileSync(
            possibleTypesFilePath,
            'utf8'
          )

          const result = await transformWithEsbuild(
            possibleTypeFile,
            possibleTypesFilePath,
            {
              loader: 'ts',
            }
          )

          return {
            code: result.code,
          }
        }
      }

      return null
    },
  }
}
