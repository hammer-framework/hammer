import fs from 'fs'
import path from 'path'

import { transformWithEsbuild } from 'vite'
import type { PluginOption } from 'vite'

import { getPaths } from '@redwoodjs/project-config'

const DEFAULT_POSSIBLE_TYPES_FILE_CONTENTS =
  'export default { possibleTypes: {} }'
const virtualPossibleTypesModuleId = 'virtual:possibleTypes'
const virtualPossibleTypesResolvedId = '\0' + virtualPossibleTypesModuleId

/**
 * This is a vite plugin to support GraphQL Fragments by either creating a
 * default possibleTypes file to be used when setting the Apollo Client Cache
 * config or allowing Apollo Client to use the possibleTypes file that is
 * generated by the GraphQL Code Generator
 *
 * This plugin handles both build and dev (aka serve) modes
 *
 * When building, a transform hook is used to replace the import of the
 * possibleTypes file with the actual contents of the file
 *
 * See:
 * packages/web/src/apollo/index.ts -> import possibleTypes from './possibleTypes'
 * packages/web/src/apollo/possibleTypes.ts
 */
export default function configureGraphQLFragments(): PluginOption {
  const possibleTypesFilePath = path.join(
    getPaths().web.graphql,
    'possibleTypes.ts'
  )

  const existsPossibleTypesFile = fs.existsSync(possibleTypesFilePath)

  return {
    name: 'configure-graphql-fragments',
    resolveId(id) {
      if (id === virtualPossibleTypesModuleId) {
        return virtualPossibleTypesResolvedId
      }

      return null
    },
    async load(id: string) {
      if (id === virtualPossibleTypesResolvedId) {
        if (existsPossibleTypesFile) {
          const possibleTypeFile = fs.readFileSync(
            possibleTypesFilePath,
            'utf8'
          )

          const result = await transformWithEsbuild(
            possibleTypeFile,
            possibleTypesFilePath,
            {
              loader: 'ts',
            }
          )

          return result.code
        } else {
          return DEFAULT_POSSIBLE_TYPES_FILE_CONTENTS
        }
      }

      return null
    },
  }
}
