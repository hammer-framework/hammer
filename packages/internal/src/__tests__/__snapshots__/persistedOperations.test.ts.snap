// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate gql persisted operations from the GraphQL Schema when there are *no* union types 1`] = `
"{
   "AddTodo_CreateTodo": "1863dcf516f27e2c74bc5f1f0c1ad2bd5b592a2fe8d47bf52c8ff1cce6292d0e",
   "NumTodosCell_GetCount": "a4ba88c68321773c776e350acfd874c15142ef56fc56aa96d7d69210bf2ef72c",
   "TodoListCell_GetTodos": "426d6567ac4a55dd755ae5e30a9e66013e8862069d1a32ad8d0557c630a9a133",
   "TodoListCell_CheckTodo": "e3ef938e0dea925a1ef928378fcd2fd0e81b70560ca0a4decd6bd9392d0617ac"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are *no* union types 2`] = `
"{
   "AddTodo_CreateTodo": "1863dcf516f27e2c74bc5f1f0c1ad2bd5b592a2fe8d47bf52c8ff1cce6292d0e",
   "NumTodosCell_GetCount": "a4ba88c68321773c776e350acfd874c15142ef56fc56aa96d7d69210bf2ef72c",
   "TodoListCell_GetTodos": "426d6567ac4a55dd755ae5e30a9e66013e8862069d1a32ad8d0557c630a9a133",
   "TodoListCell_CheckTodo": "e3ef938e0dea925a1ef928378fcd2fd0e81b70560ca0a4decd6bd9392d0617ac"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are *no* union types 3`] = `
"{
   "GetGroceries": "9198a2438e6e5dbcf42362657baca24494a9f6cf83a6033983d2a978c1c1c703",
   "GetProduce": "a8ee227d80bda6e1f785083aac537e8f1cd0340e0b52faaa27e18dbe4d629241"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are union types  1`] = `
"{
   "GetGroceries": "9198a2438e6e5dbcf42362657baca24494a9f6cf83a6033983d2a978c1c1c703",
   "GetProduce": "a8ee227d80bda6e1f785083aac537e8f1cd0340e0b52faaa27e18dbe4d629241"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are union types  2`] = `
"{
   "GetGroceries": "9198a2438e6e5dbcf42362657baca24494a9f6cf83a6033983d2a978c1c1c703",
   "GetProduce": "a8ee227d80bda6e1f785083aac537e8f1cd0340e0b52faaa27e18dbe4d629241"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are union types  3`] = `
"{
   "AddTodo_CreateTodo": "1863dcf516f27e2c74bc5f1f0c1ad2bd5b592a2fe8d47bf52c8ff1cce6292d0e",
   "NumTodosCell_GetCount": "a4ba88c68321773c776e350acfd874c15142ef56fc56aa96d7d69210bf2ef72c",
   "TodoListCell_GetTodos": "426d6567ac4a55dd755ae5e30a9e66013e8862069d1a32ad8d0557c630a9a133",
   "TodoListCell_CheckTodo": "e3ef938e0dea925a1ef928378fcd2fd0e81b70560ca0a4decd6bd9392d0617ac"
}"
`;

exports[`Generate gql persisted operations from the GraphQL Schema when there are union types  4`] = `
""""
Use to check whether or not a user is authenticated and is associated
with an optional set of roles.
"""
directive @requireAuth(roles: [String]) on FIELD_DEFINITION

"""Use to skip authentication checks and allow public access."""
directive @skipAuth on FIELD_DEFINITION

scalar BigInt

scalar Date

scalar DateTime

type Fruit implements Grocery {
  id: ID!

  """Seedless is only for fruits"""
  isSeedless: Boolean
  name: String!
  nutrients: String
  price: Int!
  quantity: Int!
  region: String!

  """Ripeness is only for fruits"""
  ripenessIndicators: String
  stall: Stall!
}

union Groceries = Fruit | Vegetable

interface Grocery {
  id: ID!
  name: String!
  nutrients: String
  price: Int!
  quantity: Int!
  region: String!
  stall: Stall!
}

scalar JSON

scalar JSONObject

"""About the Redwood queries."""
type Query {
  fruitById(id: ID!): Fruit
  fruits: [Fruit!]!
  groceries: [Groceries!]!

  """Fetches the Redwood root schema."""
  redwood: Redwood
  stallById(id: ID!): Stall
  stalls: [Stall!]!
  vegetableById(id: ID!): Vegetable
  vegetables: [Vegetable!]!
}

"""
The RedwoodJS Root Schema

Defines details about RedwoodJS such as the current user and version information.
"""
type Redwood {
  """The current user."""
  currentUser: JSON

  """The version of Prisma."""
  prismaVersion: String

  """The version of Redwood."""
  version: String
}

type Stall {
  fruits: [Fruit]
  id: ID!
  name: String!
  stallNumber: String!
  vegetables: [Vegetable]
}

scalar Time

type Vegetable implements Grocery {
  id: ID!

  """Pickled is only for vegetables"""
  isPickled: Boolean
  name: String!
  nutrients: String
  price: Int!
  quantity: Int!
  region: String!
  stall: Stall!

  """Veggie Family is only for vegetables"""
  vegetableFamily: String
}"
`;
